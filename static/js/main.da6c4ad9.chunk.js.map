{"version":3,"sources":["components/AccountForm.js","UserContext.js","components/Header.js","components/Landing.js","utils.js","components/Post.js","static/userPhotos/userPhoto0.svg","static/userPhotos/userPhoto1.svg","static/userPhotos/userPhoto2.svg","static/userPhotos/userPhoto3.svg","static/userPhotos/userPhoto4.svg","components/PostsList.js","components/CreatePost.js","components/Comment.js","components/PostAndComments.js","App.js","index.js"],"names":["ACCOUNT_POST","gql","AccountForm","submit","title","isRegister","registerStatus","useState","username","setUsername","password","setPassword","email","setEmail","handleChange","e","funct","target","value","useMutation","onCompleted","data","localStorage","setItem","postUser","jwt","window","location","href","className","onSubmit","preventDefault","formBody","variables","htmlFor","type","id","name","placeholder","onChange","required","UserContext","createContext","Header","User","useContext","onClick","process","hrefString","removeItem","Landing","timeCalculator","timeCreated","timeDelta","Date","now","ONE_DAY_IN_THOUSANDTHS_SECOND","ONE_HOUR_IN_THOUSANDTHS_SECOND","roundedTimeDelta","Math","floor","longDateTimeString","createdAt","parseInt","toLocaleString","timeZone","dateStyle","timeStyle","VOTE_PUT","Post","postDetails","isCommentSection","userVote","vote","voteValue","setVoteValue","voteSum","viewerUser","putVote","class","checked","post_id","_id","creator","description","Provider","style","verticalAlign","GET_POSTS","PostsList","props","useParams","reqParams","useQuery","loading","error","userPhotoIndex","intNum","console","log","numMod","UserPhotoSelect","LETTERTABLE","a","b","c","d","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","toLowerCase","sum","length","charAt","ParseUsernametoInt","photoArray","userPhoto0","userPhoto1","userPhoto2","userPhoto3","userPhoto4","message","placeHolder","onFocus","getPosts","map","post","src","alt","width","height","POST_POST","CreatePost","setTitle","setDescription","creatorUser","postPost","form","rows","Comment","commentDetails","content","POST_COMMENT","PostAndComments","commentList","setCommentList","newComment","setNewComment","comments","commentData","postComment","comment","App","exact","path","httpLink","createHttpLink","uri","token","getItem","authLink","setContext","_","headers","authorization","user","decode","client","ApolloClient","link","concat","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.da6c4ad9.chunk.js","sourcesContent":["import { useState } from 'react'\r\nimport { gql, useMutation } from '@apollo/client';\r\n/* Query for log in and registration */\r\nconst ACCOUNT_POST = gql`\r\n    mutation postUser($username: String!, $password: String!, $email: String) {\r\n        postUser(username: $username, password:$password,email:$email) {\r\n            username\r\n            jwt\r\n        }\r\n    } \r\n`;\r\n\r\n\r\nconst AccountForm = ({ submit, title, isRegister, registerStatus }) => {\r\n    // setting form inputs state\r\n    const [username, setUsername] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n\r\n    const handleChange = (e, funct) => {\r\n        // handles changes in form inputs\r\n        funct(e.target.value)\r\n    }\r\n\r\n    const [postUser] = useMutation(ACCOUNT_POST, {onCompleted: data => {\r\n        // graphQL fx for log in and registration using the query above\r\n        localStorage.setItem('authToken',data.postUser.jwt)\r\n        window.location.href='/SaveClient/';\r\n    }});\r\n\r\n\r\n    const onSubmit = (e) => {\r\n        // On Submit we collect the data for sending via the postUser mutation above\r\n        e.preventDefault();\r\n        let formBody = {\"username\":username,\"password\":password};\r\n        if (isRegister) {\r\n            formBody.email = email;\r\n        }\r\n        postUser({ variables: formBody})\r\n    }\r\n\r\n    return (\r\n        <form className=\"accountForm\" onSubmit={onSubmit}>\r\n            <div className=\"accountForm\">\r\n                <h2>{title}:</h2>\r\n\r\n                <div className=\"formItem\">\r\n                    <label htmlFor=\"Username\">Username:</label>\r\n                    <input className=\"formInput\" type=\"username\" id={title+\"Username\"} name=\"Username\" placeholder=\"Enter Username\" value={username} onChange={(e) =>handleChange(e, setUsername)} required/>\r\n                </div>\r\n\r\n                <div className=\"formItem\">\r\n                    <label htmlFor=\"Password\">Password:</label>\r\n                    <input className=\"formInput\" type=\"password\" id={title+\"Password\"} name=\"Password\" placeholder=\"Enter Password\" value={password} onChange={(e) =>handleChange(e, setPassword)} required/>\r\n                </div>\r\n\r\n                {isRegister && <div className=\"formItem\"> \r\n                    <label htmlFor=\"Email\">Email:</label> \r\n                    <input className=\"formInput\" type=\"email\" id=\"Email\" name=\"Email\" placeholder=\"Enter Email\" value={email} onChange={(e) =>handleChange(e, setEmail)} required/>\r\n                </div>}\r\n\r\n                <input className=\"accFormBtn\" type=\"submit\" name={title} value={title}/>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default AccountForm\r\n","import { createContext } from 'react';\r\nexport const UserContext = createContext(null);\r\n","import { UserContext } from \"../UserContext\";\r\nimport { useContext } from 'react';\r\nimport { FaTree, FaSave,FaUserTie } from \"react-icons/fa\";\r\nimport { IoLogOut } from \"react-icons/io5\";\r\nimport '../static/header.css'\r\nconst Header = () => {\r\n    // Header Component that is visable on all pages\r\n\r\n\r\n    const User = useContext(UserContext);  // calls user from token-generated context\r\n\r\n    const logOut = (e) => {\r\n        // log out function clears our token from local storage and sends us back to the top of the site, which without a token routes us to the landing\r\n        localStorage.removeItem('authToken');\r\n        window.location.href=process.env.PUBLIC_URL +'/'\r\n    }\r\n\r\n    const userProfileClick = (e) => {\r\n        // link to our personal profile on header click\r\n        e.preventDefault();\r\n        let hrefString =process.env.PUBLIC_URL +'#/user/'+User.username;\r\n        window.location.href=hrefString;\r\n    }\r\n    const homePageClick = (e) => {\r\n        // link to our homepage when clicking on the logo\r\n        e.preventDefault();\r\n        window.location.href=process.env.PUBLIC_URL +'/';\r\n    }\r\n    return (\r\n        <header>\r\n          <div className=\"holder titleHolder\" onClick={homePageClick}>\r\n              <div id=\"logoText\"><p id=\"h1LogoText\">SaveTree</p></div>\r\n              <div className=\"Icon\"><FaSave/></div>\r\n              <div className=\"Icon Tree\"><FaTree/></div><p>v: 1.0.0</p>\r\n          </div>\r\n          {(User !==null) && <div className=\"holder userHolder\">\r\n              <div className=\"userProfileLink\" onClick={userProfileClick}>\r\n                <h2><FaUserTie/></h2>\r\n                <h3>{User.username}</h3>  \r\n              </div>\r\n              <h1 className=\"logOut\" onClick={logOut}><IoLogOut /></h1>\r\n            </div>}\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header\r\n","import AccountForm from './AccountForm'; \r\nimport Header from './Header';\r\nimport '../static/AccountForm.css'\r\n\r\n\r\nconst Landing = () => {\r\n    // component for the Log In and Registration Page\r\n    return (\r\n        <>\r\n            <Header />\r\n            <div className=\"landingPage\">\r\n                <div className=\"landingPageForm\"><AccountForm isRegister={false} title={\"Login\"}/></div>\r\n                <div className=\"landingPageForm\"><AccountForm isRegister={true} title={\"Register\"}/></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Landing\r\n","/* Various Functions used throughout the app for different functionalities.*/\r\n\r\nconst ParseUsernametoInt = (username) => {\r\n    /* We want to create Ints for usernames that are consitent numerical values.\r\n    They are used solely for giving each user a consistent photo ID color*/\r\n    const LETTERTABLE = {a:1,b:2,c:3,d:4,e:5,f:6,g:7,h:8,i:9,j:10,k:11,l:12,m:13,n:14,o:15,p:16,q:17,r:18,s:19,t:20,u:21,v:22,w:23,x:24,y:25,z:26,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,0:0};\r\n    username = username.toLowerCase();\r\n    let sum = 0;\r\n    for (let i = 0; i < username.length; i++) {\r\n        if (LETTERTABLE[username.charAt(i)]){\r\n            sum += LETTERTABLE[username.charAt(i)];\r\n        }\r\n    }\r\n    return sum;\r\n}\r\n\r\nconst UserPhotoSelect = (intNum) => {\r\n    // User Photo Selection, takes the int from ParseUsernameToInt and returns an index corresponding to their user photo.\r\n    console.log(intNum)\r\n    let numMod = intNum % 5;\r\n    console.log(numMod)\r\n    return numMod;\r\n}\r\n\r\nconst timeCalculator = (timeCreated) => {\r\n    /*Translating our time value into something viewer readable*/\r\n    let timeDelta = Date.now() - timeCreated;\r\n    const ONE_DAY_IN_THOUSANDTHS_SECOND = 24 * 60 * 60 * 1000; // 1 day in 1000s of a second (The format date is given in)\r\n    const ONE_HOUR_IN_THOUSANDTHS_SECOND = 60 * 60 * 1000; // 1 hour in 1000s of a second (The format date is given in)\r\n    if (timeDelta >= ONE_DAY_IN_THOUSANDTHS_SECOND) {\r\n        let roundedTimeDelta = Math.floor(timeDelta / ONE_DAY_IN_THOUSANDTHS_SECOND)\r\n        if (roundedTimeDelta == 1){\r\n            return `${roundedTimeDelta} day ago`\r\n        } else {\r\n            return `${roundedTimeDelta} days ago`\r\n        }\r\n    }\r\n    else if (timeDelta <= ONE_HOUR_IN_THOUSANDTHS_SECOND) { \r\n        return \"<1 Hour Ago\"\r\n    }\r\n    else {\r\n        let roundedTimeDelta = Math.floor(timeDelta / ONE_HOUR_IN_THOUSANDTHS_SECOND)\r\n        if (roundedTimeDelta == 1){\r\n            return `${roundedTimeDelta} hour ago`\r\n        } else {\r\n            return `${roundedTimeDelta} hours ago`\r\n        }\r\n    }\r\n}\r\n\r\nconst longDateTimeString = (createdAt) => {\r\n    /* This function gives long date strings for when hovering the X time ago element*/\r\n    let dateCreatedAt = new Date(parseInt(createdAt));\r\n    const options = { timeZone:\"America/New_York\", dateStyle:\"full\",timeStyle:\"long\" };\r\n    return dateCreatedAt.toLocaleString('en-US', options);\r\n}\r\n\r\nexport { timeCalculator, ParseUsernametoInt, UserPhotoSelect, longDateTimeString };","import { BiMessageDetail, BiEdit, BiTrash} from \"react-icons/bi\";\r\nimport { FaArrowDown, FaArrowUp } from \"react-icons/fa\";\r\nimport { useState } from 'react';\r\nimport { gql, useMutation } from '@apollo/client';\r\nimport { UserContext } from \"../UserContext\";\r\nimport { useContext } from 'react';\r\nimport { IconContext } from \"react-icons\";\r\n// local imports\r\nimport { timeCalculator, longDateTimeString } from \"../utils\";\r\nimport '../static/Post.css'\r\n\r\n// graphQL query/mutation for sending votes\r\nconst VOTE_PUT = gql`\r\n    mutation putVote($username: String!, $post_id: String!, $vote: Int!) {\r\n        putVote(username: $username, post_id:$post_id, vote:$vote) {\r\n            vote\r\n        }\r\n    } \r\n`;\r\n\r\nconst Post = ({postDetails, isCommentSection}) => {\r\n    // component for individual posts, both at the top of their comments section and on post query pages\r\n\r\n    // setting vote states\r\n    const [voteValue, setVoteValue] = useState(postDetails.userVote.vote);\r\n    const [voteSum, setVoteSum] = useState(postDetails.voteSum-postDetails.userVote.vote);\r\n\r\n    //logged in user is needed for applying their votes to the right person\r\n    const viewerUser = useContext(UserContext);\r\n\r\n    const [putVote] = useMutation(VOTE_PUT); // fx to send the vote mutation in the upvote and downvote fxs\r\n\r\n    const upvoteFunc = (e) => {\r\n            //sends an upvote to the server from the logged in user on click\r\n            setVoteValue(1);\r\n            putVote({ variables: {username:viewerUser.username,post_id:postDetails._id,vote:1}});\r\n    }\r\n    const downvoteFunc = (e) => {\r\n            //sends a downvote to the server from the logged in user on click\r\n            setVoteValue(-1);\r\n            putVote({ variables: {username:viewerUser.username,post_id:postDetails._id,vote:-1}});\r\n    }\r\n\r\n    const userProfileClick = (e) => {\r\n        // link to user profile at the username in the post header\r\n        e.preventDefault();\r\n        let hrefString =process.env.PUBLIC_URL +'#/user/'+postDetails.creator;\r\n        window.location.href=hrefString;\r\n    }\r\n\r\n    const postCommentClick = (e) => {\r\n        // link to the post's comment section.\r\n        e.preventDefault();\r\n        let hrefString =process.env.PUBLIC_URL+'#/post/'+postDetails._id;\r\n        window.location.href=hrefString;\r\n    }\r\n    return (\r\n        <div className=\"postDiv\">\r\n            <div className=\"votesDiv\">\r\n                <label class=\"labelVote\">\r\n                    <input type=\"radio\" className=\"voteRadio voteRadioUp\" name=\"vote\" value={voteValue} checked={(voteValue == 1)} onChange={upvoteFunc}/>\r\n                    <h2 className={(voteValue === 1) && \"colorUpVote\"}><FaArrowUp/></h2>\r\n                </label>\r\n                <h3>{voteSum + voteValue}</h3> {/*Rather than callback the current votesum and have confusing vote total changes (If other users voted simultaneously, we adjust the total locally*/}\r\n                <label class=\"labelVote\">\r\n                    <input type=\"radio\" className=\"voteRadio\" name=\"vote\" value={voteValue} checked={(voteValue == -1)} onChange={downvoteFunc}/>\r\n                    <h2 className={(voteValue === -1) && \"colorDownVote\"}><FaArrowDown/></h2>\r\n                </label>\r\n            </div>\r\n            <div className=\"postContent\">\r\n                <div className=\"postHeaderandTitle\">\r\n                    <div className=\"postHeader\">\r\n                        <p>Created by <a className=\"pointer\" onClick={userProfileClick}>{postDetails.creator}</a></p>\r\n                        <p title={longDateTimeString(postDetails.createdAt)}>{timeCalculator(postDetails.createdAt)}</p>\r\n                    </div>\r\n                    <h2 className=\"postTitle\">{postDetails.title}</h2>\r\n                    {isCommentSection&& /*If we are in the comment section we hide the comment section link and insert the description */\r\n                        <p className=\"postDescription\">{postDetails.description}</p>}\r\n                </div>\r\n                <div className=\"postFooter\">\r\n                    {(!isCommentSection)&& /* If we are not in the comment section we display the link to the comment section*/\r\n                        <h3 className=\"postComment\" onClick={postCommentClick}>\r\n                            <IconContext.Provider value={{ style: { verticalAlign: 'middle'} }}>\r\n                                <BiMessageDetail/>\r\n                            </IconContext.Provider>\r\n                            Comments\r\n                        </h3>}\r\n                    {/*NOTE: ADD LATER FOR PORTFOLIO VERSION NOT OUTLINED IN PORJECT <h3><BiEdit/></h3>  <h3><BiTrash/></h3>*/}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post\r\n","export default __webpack_public_path__ + \"static/media/userPhoto0.4f22e5ba.svg\";","export default __webpack_public_path__ + \"static/media/userPhoto1.4c3a4164.svg\";","export default __webpack_public_path__ + \"static/media/userPhoto2.fb3ff68b.svg\";","export default __webpack_public_path__ + \"static/media/userPhoto3.5a0a1e74.svg\";","export default __webpack_public_path__ + \"static/media/userPhoto4.960cb3ff.svg\";","import { FaPaperPlane,FaUserTie } from 'react-icons/fa'\r\nimport { gql, useQuery } from '@apollo/client';\r\nimport { BrowserRouter as Router, useParams} from 'react-router-dom';\r\nimport { useContext } from 'react';\r\n// local imports\r\nimport { UserContext } from \"../UserContext\";\r\nimport '../static/PostsList.css'\r\nimport Post from './Post'\r\nimport { UserPhotoSelect, ParseUsernametoInt } from '../utils';\r\n\r\n// importing the 5 different user photos. Each user is assigned a consistent photo based on an algorithm to turn usernames into a number 0-4. See More in Utils\r\nimport userPhoto0 from '../static/userPhotos/userPhoto0.svg'\r\nimport userPhoto1 from '../static/userPhotos/userPhoto1.svg'\r\nimport userPhoto2 from '../static/userPhotos/userPhoto2.svg'\r\nimport userPhoto3 from '../static/userPhotos/userPhoto3.svg'\r\nimport userPhoto4 from '../static/userPhotos/userPhoto4.svg'\r\n\r\n// Query gets all posts, if on a user page, it gets all posts by said user. Also Returns viewer's vote history on each post.\r\nconst GET_POSTS = gql`\r\n    query getPosts($username:String!,$creator:String) {\r\n        getPosts(creator:$creator) {\r\n            _id\r\n            title\r\n            description\r\n            creator\r\n            createdAt\r\n            voteSum\r\n            userVote(username:$username) {\r\n                vote\r\n            }\r\n        }\r\n    }\r\n`;\r\nconst PostsList = (props) => {\r\n    \r\n    // Query Prep // id is for user specific pages\r\n    let { id } = useParams();\r\n    const viewerUser = useContext(UserContext);\r\n    const reqParams = { username:viewerUser.username };\r\n    if (id) {\r\n        reqParams.creator = id; // check if the page has a user id, if yes adds to query.\r\n    }\r\n\r\n    const { loading, error, data } = useQuery(GET_POSTS, {\r\n        variables: reqParams,\r\n      });\r\n    // functions for the page.\r\n    const createPostClick = (e) => {\r\n        e.preventDefault();\r\n        window.location.href=process.env.PUBLIC_URL + '#/create'\r\n    }\r\n    // finding UserPhoto\r\n    let userPhotoIndex = 0;\r\n    if (id) {\r\n        userPhotoIndex = UserPhotoSelect(ParseUsernametoInt(id))\r\n    };\r\n    const photoArray = [userPhoto0,userPhoto1,userPhoto2,userPhoto3,userPhoto4]\r\n    if (loading) return 'Loading...';\r\n    if (error) return `Error! ${error.message}`;\r\n    return (\r\n        \r\n        <div className={(id)&&\"userContainer\"}>\r\n            <div className=\"postList\">\r\n                {(id) && <div className=\"postListHeader userProfileHeader\">\r\n                    <FaUserTie className=\"createIcon\" />\r\n                    <h4>{id}'s Profile</h4>\r\n                </div>}\r\n                {(!id) && <div className=\"postListHeader\">\r\n                    <FaUserTie className=\"createIcon\" />\r\n                    <input className=\"createPostInput\" type=\"text\" placeHolder={\"Create New Post\"} onFocus={createPostClick}/>\r\n                    <FaPaperPlane className=\"createIcon\"/>\r\n                </div>}\r\n                {data.getPosts.map(post =>(<Post postDetails={post}/>))}\r\n            </div>\r\n            {(id) && <div className=\"userTile\">\r\n              <img src={photoArray[userPhotoIndex]} alt=\"Stock User Image lady waters flowers\" className=\"userPhoto\" width=\"300\" height=\"300\"/>\r\n              <h2>{id}'s Profile</h2>\r\n                \r\n            </div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostsList\r\n","import { useState } from 'react'\r\nimport { gql, useMutation } from '@apollo/client';\r\nimport { UserContext } from \"../UserContext\";\r\nimport { useContext } from 'react';\r\nimport { FaPaperPlane } from 'react-icons/fa'\r\n\r\nimport '../static/CreatePost.css'\r\n\r\n// GraphQL mutation for sending a new post.\r\nconst POST_POST = gql`\r\n    mutation postPost($title: String!, $description: String!, $creator: String!) {\r\n        postPost(title: $title, description: $description,creator:$creator) {\r\n         _id\r\n        }\r\n    }\r\n`;\r\n\r\nconst CreatePost = () => {\r\n    // Create Post form page component\r\n\r\n    // setting up form states and calling the user for sending in the query/mutation\r\n    const [title, setTitle] = useState(\"\");\r\n    const [description, setDescription] = useState(\"\");\r\n    const creatorUser = useContext(UserContext);\r\n\r\n    const handleChange = (e, funct) => { // handles changes in form inputs\r\n        funct(e.target.value)\r\n    }\r\n\r\n    const [postPost] = useMutation(POST_POST, {onCompleted: data => {\r\n        // Graph QL Function for sending new posts in\r\n        let hrefString = process.env.PUBLIC_URL +'#/post/' + data.postPost._id // link string to new posts url \r\n        window.location.href=hrefString;\r\n    }});\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n        let formBody = {\"title\":title,\"description\":description,\"creator\":creatorUser.username};\r\n        postPost({ variables: formBody}) // no need to clear state because we leave the page at the end of this request\r\n    }\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <form className=\"form\" id=\"newIssueForm\" onSubmit={onSubmit}>\r\n                <div className=\"createDiv\">\r\n                        <h2 id=\"formTitle\">Create Issue:</h2>\r\n                        <label className=\"screenHiddenLabel\" htmlFor=\"postTitle\">Title*</label>\r\n                        <input type=\"text\" name=\"postTitle\" className=\"postTitle postInput\" placeholder=\"Enter Issue Title\" value={title} onChange={(e) =>handleChange(e, setTitle)} required/>\r\n                        <label className=\"screenHiddenLabel\" htmlFor=\"issueDescription\">Description*</label>\r\n                        <textarea form=\"newIssueForm\" rows=\"6\" className=\"descriptionInput postInput\" name=\"issueDescription\" placeholder=\"Enter Issue Description\" value={description} onChange={(e) =>handleChange(e, setDescription)} required/>\r\n                    <button className=\"submit\" form=\"newIssueForm\" type=\"submit\" >Create Issue <FaPaperPlane/></button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreatePost\r\n\r\n","import { UserContext } from \"../UserContext\";\r\nimport { useContext } from 'react';\r\nimport '../static/Comment.css'\r\nimport { timeCalculator,longDateTimeString } from \"../utils\";\r\n\r\nconst Comment = ({commentDetails}) => {\r\n\r\n    const userProfileClick = (e) => {\r\n        // links to the user profile when clicking on posting user's name\r\n        e.preventDefault();\r\n        let hrefString =process.env.PUBLIC_URL +'#/user/'+commentDetails.creator;\r\n        window.location.href=hrefString;\r\n    }\r\n\r\n    const viewerUser = useContext(UserContext); // storing the logged in viewer from context\r\n\r\n    return (\r\n        <div className={commentDetails.creator===viewerUser.username?\"commentDiv opComment\":\"commentDiv\"}>\r\n            <div className=\"commentHeader\">\r\n                <p>Created By <a className=\"pointer\" onClick={userProfileClick}>{commentDetails.creator}{(commentDetails.creator===viewerUser.username)&&\" (you!)\"}</a></p>\r\n                <p title={longDateTimeString(commentDetails.createdAt)}>{timeCalculator(commentDetails.createdAt)}</p>\r\n            </div>\r\n            <h3>{commentDetails.content}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Comment\r\n","import { gql, useQuery, useMutation } from '@apollo/client';\r\nimport { BrowserRouter as Router, useParams } from 'react-router-dom';\r\nimport { UserContext } from \"../UserContext\";\r\nimport { useContext,useState } from 'react';\r\nimport { FaPaperPlane } from 'react-icons/fa';\r\n// local imports\r\nimport Post from './Post';\r\nimport Comment from './Comment';\r\nimport '../static/PostAndComments.css'\r\n\r\n// GraphQL mutation string for adding new comments\r\nconst POST_COMMENT = gql`\r\n    mutation postComment($post_id:String!,$creator:String!,$content:String!) {\r\n    postComment(post_id:$post_id,creator:$creator,content:$content) {\r\n        createdAt\r\n        content\r\n        creator\r\n    }\r\n}\r\n`;\r\n\r\n// GraphQL mutation string getting the post and it's comments.\r\nconst GET_POSTS = gql`\r\n    query getPosts($username:String!,$_id:ID!) {\r\n        getPosts(_id:$_id) {\r\n            _id\r\n            title\r\n            description\r\n            creator\r\n            createdAt\r\n            voteSum\r\n            comments {\r\n              content\r\n              creator\r\n              createdAt\r\n            }\r\n            userVote(username:$username) {\r\n              vote\r\n            }\r\n        }\r\n    }\r\n`;\r\n\r\nconst PostAndComments = () => {\r\n    // component for the comment section page of an individual post\r\n\r\n    // putting the comment list in state so that an added comment refreshes state and loads our new comment\r\n    const [commentList, setCommentList] = useState([]);\r\n\r\n    // setting up form state\r\n    const [newComment, setNewComment] = useState(\"\");\r\n\r\n    const handleChange = (e, funct) => {\r\n        // handles form changes\r\n        funct(e.target.value)\r\n    }\r\n    let { id } = useParams(); // gets post id from link header\r\n    const viewerUser = useContext(UserContext); // gets logged in user to access person vote on the post\r\n\r\n    const reqParams = { username:viewerUser.username,_id:id }; // preparing our getPost request params\r\n\r\n    const { loading, error, data } = useQuery(GET_POSTS, {\r\n        //getPost Request using the query above\r\n        variables: reqParams, onCompleted: data => {\r\n            setCommentList(data.getPosts[0].comments) // sets state when the request is completed\r\n        }});\r\n    \r\n    const [postComment] = useMutation(POST_COMMENT, \r\n        // mutation function to send our new comment request\r\n        { variables: {post_id:id,creator:viewerUser.username,content:newComment}, \r\n        onCompleted: commentData => {\r\n        setCommentList([commentData.postComment, ...commentList]); // Adds our new comment to the top of the comment list.\r\n    }});\r\n\r\n    const submit = (e) => {\r\n        // newComment form submit action\r\n        e.preventDefault();\r\n        postComment();\r\n        setNewComment(\"\");\r\n    }\r\n\r\n    if (loading) return 'Loading...';\r\n    if (error) return `Error! ${error.message}`;\r\n    return (\r\n        <div className=\"commentPageContainer\">\r\n            <Post postDetails={data.getPosts[0]} isCommentSection={true}/> {/*Loading our original post*/}\r\n            <form className=\"newCommentForm\" id=\"newCommentForm\" onSubmit={submit}>\r\n                <label className=\"screenHiddenLabel\" htmlFor=\"newComment\">Description*</label>\r\n                <textarea form=\"newCommentForm\" rows=\"6\" className=\"commentInput\" name=\"newComment\" placeholder=\"Create New Comment\" value={newComment} onChange={(e) =>handleChange(e, setNewComment)} required/>\r\n                <button className=\"submit\" form=\"newCommentForm\" type=\"submit\" >Post Comment<FaPaperPlane/></button>\r\n            </form>\r\n            <div className=\"commentsContainer\">\r\n                {commentList.map(comment =>(<Comment className=\"comment\" commentDetails={comment}/>))} {/*Listing off our comments in the comments container*/}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PostAndComments","import React from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\n// local imports\r\nimport Header from './components/Header';\r\nimport PostsList from './components/PostsList';\r\nimport CreatePost from './components/CreatePost';\r\nimport PostAndComments from \"./components/PostAndComments\";\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Header />\r\n      <div>\r\n          <Switch>\r\n          <Route exact path={'/'}>\r\n            <PostsList />\r\n          </Route>\r\n          <Route exact path={'/create'}>\r\n            <CreatePost />\r\n          </Route>\r\n          <Route path={'/user/:id'}>\r\n            <PostsList />\r\n          </Route>\r\n          <Route path={'/post/:id'}>\r\n            <PostAndComments/>\r\n          </Route>\r\n          </Switch>\r\n      </div>\r\n      </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// dependency imports\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { ApolloProvider, ApolloClient, InMemoryCache, createHttpLink} from '@apollo/client';\r\nimport { setContext } from '@apollo/client/link/context';\r\nimport jwt from 'jsonwebtoken';\r\nimport { HashRouter as Router } from \"react-router-dom\";\r\n// local imports\r\nimport Landing from './components/Landing';\r\nimport App from './App';\r\nimport './index.css';\r\nimport { UserContext } from \"./UserContext\";\r\n\r\n\r\n\r\nconst httpLink = createHttpLink({\r\n  uri: 'https://save-tree.herokuapp.com/api/graphql',\r\n});\r\n\r\nconst token = localStorage.getItem('authToken');\r\n\r\n// fx to set our token in the header.\r\nconst authLink = setContext((_, { headers }) => {\r\n  return {\r\n    headers: {\r\n      ...headers,\r\n      authorization: token ? `Bearer ${token}` : \"\",\r\n    }\r\n  }\r\n});\r\n\r\nlet user = null; // setting user as null.\r\n\r\nif (token) { // updating user to match token if a token exists\r\nconst tokenDecode = jwt.decode(token)\r\nuser = {username:tokenDecode.username};\r\n}\r\n\r\n\r\nconst client = new ApolloClient({ // Starting Apollo Client with Auth token in header and cached memory.\r\n  link: authLink.concat(httpLink),\r\n  cache: new InMemoryCache()\r\n});\r\n\r\nReactDOM.render(\r\n  <ApolloProvider client={client}>\r\n    <UserContext.Provider value={(user)?user:null}> {/* If a user was found on the token it is applied to the userContext here for children to access*/}\r\n    <Router>\r\n    {token ? <App /> : <Landing/>} {/*If A token was found it goes to the front page, otherwise, we send visitors to the log in / register page*/}\r\n    </Router>\r\n    </UserContext.Provider>\r\n  </ApolloProvider>,\r\n  document.getElementById('root')\r\n);"],"sourceRoot":""}